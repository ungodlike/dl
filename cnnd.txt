import tensorflow as tf

# First example
x = tf.constant([[1., 2., 3.1], [4., 5., 6.], [7., 8., 9.]])
x = tf.reshape(x, [1, 3, 3, 1])
max_pool_2d = tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(1, 1), padding='valid')
result = max_pool_2d(x)
print(result.numpy())

# Second example
x = tf.constant([[1., 2., 3., 4.],
                [5., 6., 7., 8.],
                [9., 10., 11., 12.]])
x = tf.reshape(x, [1, 3, 4, 1])
max_pool_2d = tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid')
max_pool_result = max_pool_2d(x)

# Average Pooling
average_pool_2d = tf.keras.layers.AveragePooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid')
average_pool_result = average_pool_2d(x)

print("Max Pooling Result:")
print(max_pool_result.numpy())
print("Average Pooling Result:")
print(average_pool_result.numpy())

import tensorflow as tf
from tensorflow.keras import layers, models

# Define the CNN model
model = models.Sequential()

# First Convolutional Layer
model.add(layers.Conv2D(6, (5, 5), strides=(1, 1), padding='valid', activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Second Convolutional Layer
model.add(layers.Conv2D(16, (5, 5), strides=(1, 1), padding='valid', activation='relu'))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Flatten Layer
model.add(layers.Flatten())

# Fully Connected Layer 1
model.add(layers.Dense(120, activation='relu'))

# Fully Connected Layer 2
model.add(layers.Dense(48, activation='relu'))

# Print model summary
model.summary()
