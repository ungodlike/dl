import tensorflow as tf
import numpy as np
import pandas as pd
from pylab import rcParams
import matplotlib.pyplot as plt
import warnings
import keras
from mlxtend.plotting import plot_decision_regions
from matplotlib.colors import ListedColormap
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_circles, make_moons, load_diabetes, load_breast_cancer

#Getting Data
np.random.seed(50)

X, y = make_circles(n_samples=50, noise=0.2, random_state=1)
zero_one_colormap = ListedColormap(('red', 'green'))
rcParams['figure.autolayout']
plt.scatter(X[:,0],X[:,1], c=y, s=50, cmap=zero_one_colormap)
plt.show()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.33, random_state=2)

#Creating Model
model = Sequential()
model.add(Dense(500, input_dim=2, activation='relu'))
model.add(Dense(500, input_dim=2, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics = ['accuracy'])

#Training Model
history = model.fit(X_train,y_train,validation_data= (X_test,y_test), epochs=1000, verbose=0)

print("Loss for training Data : ", history.history['loss'][-1])
print("Loss for testing Data : ", history.history['val_loss'][-1])
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.legend()
plt.show()

weights = model.get_weights()
print(np.max(weights[0]))
print(np.max(weights[1]))

reg_model = Sequential()
reg_model.add(Dense(500, input_dim=2, activation='relu', kernel_regularizer = 'l2'))
reg_model.add(Dense(500, input_dim=2, activation='relu', kernel_regularizer = 'l2'))
reg_model.add(Dense(1, activation='sigmoid', kernel_regularizer = 'l2'))
reg_model.compile(loss='binary_crossentropy', optimizer='adam', metrics = ['accuracy'])

reg_history = reg_model.fit(X_train,y_train,validation_data= (X_test,y_test), epochs=1000, verbose=0)

print("Loss for training Data : ", reg_history.history['loss'][-1])
print("Loss for testing Data : ", reg_history.history['val_loss'][-1])
plt.plot(reg_history.history['loss'], label='train')
plt.plot(reg_history.history['val_loss'], label='test')
plt.legend()
plt.show()

reg_weights = model.get_weights()
print(np.max(reg_weights[0]))
print(np.max(reg_weights[1]))

X,y = load_breast_cancer(return_X_y=True)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.33, random_state=2)

#Creating Model
cancer_model = Sequential()
cancer_model.add(keras.Input(shape=(30,)))
cancer_model.add(Dense(500, input_dim=2, activation='relu'))
cancer_model.add(Dense(500, input_dim=2, activation='relu'))
cancer_model.add(Dense(1, activation='sigmoid'))
cancer_model.compile(loss='binary_crossentropy', optimizer='adam', metrics = ['accuracy'])

#Training Model
cancer_history = cancer_model.fit(X_train,y_train,validation_data= (X_test,y_test), epochs=1000, verbose=0)

cancer_weights = cancer_model.get_weights()
print(np.max(cancer_weights[0]))
print(np.max(cancer_weights[1]))
print("Loss for training Data : ", cancer_history.history['loss'][-1])
print("Loss for testing Data : ", cancer_history.history['val_loss'][-1])
plt.plot(cancer_history.history['loss'], label='train')
plt.plot(cancer_history.history['val_loss'], label='test')
plt.legend()
plt.show()

reg_cancer_model = Sequential()
reg_cancer_model.add(keras.Input(shape=(30,)))
reg_cancer_model.add(Dense(500, input_dim=2, activation='relu', kernel_regularizer = 'l2'))
reg_cancer_model.add(Dense(500, input_dim=2, activation='relu', kernel_regularizer = 'l2'))
reg_cancer_model.add(Dense(1, activation='sigmoid', kernel_regularizer = 'l2'))
reg_cancer_model.compile(loss='binary_crossentropy', optimizer='adam', metrics = ['accuracy'])

reg_cancer_history = reg_cancer_model.fit(X_train,y_train,validation_data= (X_test,y_test), epochs=1000, verbose=0)

reg_cancer_weights = reg_cancer_model.get_weights()
print(np.max(reg_cancer_weights[0]))
print(np.max(reg_cancer_weights[1]))
print("Loss for training Data : ", reg_cancer_history.history['loss'][-1])
print("Loss for testing Data : ", reg_cancer_history.history['val_loss'][-1])
plt.plot(reg_cancer_history.history['loss'], label='train')
plt.plot(reg_cancer_history.history['val_loss'], label='test')
plt.legend()
plt.show()

