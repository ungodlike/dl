import tensorflow as tf
from tensorflow.keras import layers, models, datasets
import matplotlib.pyplot as plt

# Load and preprocess the MNIST dataset
(X_train,y_train), (X_test, y_test) = datasets.mnist.load_data()

inp_shape=(X_train.shape[1],X_train.shape[2],1)

X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],X_train.shape[2],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],X_test.shape[2],1)

X_train=X_train.astype("float32") / 255
X_test=X_test.astype("float32") / 255

print(inp_shape)
print(X_train.shape)

batch_size=250
no_epochs=10
no_classes=10
validation_split=0.2
verbosity=1

model = models.Sequential()
model.add(layers.Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=inp_shape))
model.add(layers.MaxPooling2D(pool_size=(2,2)))
model.add(layers.Conv2D(64,kernel_size=(3,3),activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2,2)))
model.add(layers.Flatten())
model.add(layers.Dense(256,activation='relu'))
model.add(layers.Dense(no_classes,activation='softmax'))
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
history=model.fit(X_train,y_train,batch_size=batch_size,
                  epochs=no_epochs,
                  verbose=verbosity,
                  validation_split=validation_split)
model.evaluate(X_test,y_test,verbose=0)

model = models.Sequential()
model.add(layers.Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=inp_shape))
model.add(layers.BatchNormalization())
model.add(layers.MaxPooling2D(pool_size=(2,2)))
model.add(layers.BatchNormalization())
model.add(layers.Conv2D(64,kernel_size=(3,3),activation='relu'))
model.add(layers.BatchNormalization())
model.add(layers.MaxPooling2D(pool_size=(2,2)))
model.add(layers.BatchNormalization())
model.add(layers.Flatten())

model.add(layers.Dense(256,activation='relu'))
model.add(layers.BatchNormalization())
model.add(layers.Dense(no_classes,activation='softmax'))
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
history_norm=model.fit(X_train,y_train,batch_size=batch_size,
                  epochs=no_epochs,
                  verbose=verbosity,
                  validation_split=validation_split)
model.evaluate(X_test,y_test,verbose=0)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(['Train','Test'],loc='lower right')
plt.show()

plt.plot(history_norm.history['accuracy'])
plt.plot(history_norm.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(['Train','Test'],loc='lower right')
plt.show()
